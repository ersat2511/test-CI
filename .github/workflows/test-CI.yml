name: CI

on:
  issue_comment:
    types:
      - created

jobs:
  build:
    runs-on: ubuntu-latest
    if: ${{ (github.event.issue.pull_request && (github.event.comment.body == 'build' || github.event.comment.body == 'deploy')) }}
    steps:
      - uses: xt0rted/pull-request-comment-branch@v1
        id: comment-branch

      - uses: actions/checkout@v2
        with:
          ref: ${{ steps.comment-branch.outputs.head_ref }}

      - uses: actions/setup-java@v1
        with:
          java-version: "12.x"

      - uses: subosito/flutter-action@v2
        with:
          flutter-version: "2.10.5"

      - name: Analyze
        working-directory: ./app
        run: flutter analyze

      - name: Testing
        working-directory: ./app
        run: flutter test --coverage --no-pub --coverage-path=./coverage/lcov.info

      - name: Report Code Coverage for Testing Discovery Module
        uses: zgosalvez/github-actions-report-lcov@v1.5.0
        with:
          coverage-files: ./app/coverage/lcov.info
          minimum-coverage: 50
          artifact-name: code-coverage-report-discovery-module
          working-directory: ./app
      
      - uses: actions/github-script@v6
        id: set-summary
        with:
          script: |

          const detail = (coverageFile, octokit) => {
            let output = ''

            const options = {}
            options.listeners = {
              stdout: (data) => {
                output += data.toString()
              },
              stderr: (data) => {
                output += data.toString()
              }
            }

            await exec.exec('lcov', [
              '--list',
              coverageFile,
              '--list-full-path',
              '--rc',
              'lcov_branch_coverage=1',
            ], options)

            let lines = output
              .trim()
              .split(/\r?\n/)

            lines.shift()
            lines.pop()
            lines.pop()

            const listFilesOptions = octokit
              .pulls.listFiles.endpoint.merge({
                owner: github.context.repo.owner,
                repo: github.context.repo.repo,
                pull_number: github.context.payload.pull_request.number,
              })
            const listFilesResponse = await octokit.paginate(listFilesOptions)
            const changedFiles = listFilesResponse.map(file => file.filename)

            lines = lines.filter((line, index) => {
              if (index <= 2) return true // Include header

              for (const changedFile of changedFiles) {
                console.log(`${line} === ${changedFile}`)

                if (line.startsWith(changedFile)) return true
              }

              return false
            })

            if (lines.length === 3) { // Only the header remains
              return ' n/a'
            }

            return '\n  ' + lines.join('\n  ')
          }

          const summarize = (coverageFile) {
            let output = ''

            const options = {}
            options.listeners = {
              stdout: (data) => {
                output += data.toString()
              },
              stderr: (data) => {
                output += data.toString()
              }
            }

            await exec.exec('lcov', [
              '--summary',
              coverageFile,
              '--rc',
              'lcov_branch_coverage=1'
            ], options)

            const lines = output
              .trim()
              .split(/\r?\n/)

            lines.shift() // Removes "Reading tracefile..."

            return lines.join('\n')
          }

          const octokit = await github.getOctokit(gitHubToken)
          const summary = await summarize(coverageFile)
          const details = await detail(coverageFile, octokit)
          const sha = github.context.payload.pull_request.head.sha
          const shaShort = sha.substr(0, 7)
          let body = `### [LCOV](https://github.com/marketplace/actions/report-lcov) of commit [<code>${shaShort}</code>](${github.context.payload.pull_request.number}/commits/${sha}) during [${github.context.workflow} ${github.context.runNumber}](../actions/runs/${github.context.runId})\n<pre>${summary}\n\nFiles changed coverage rate:${details}</pre>`

          core.debug("Creating a comment in the PR.")
          await octokit.issues.createComment({
            owner: github.context.repo.owner,
            repo: github.context.repo.repo,
            issue_number: github.context.payload.pull_request.number,
            body: body,
          })
          # result-encoding: string

      # - name: Get result
      #   run: echo "${{steps.set-summary.outputs.result}}"

      # - uses: actions-ecosystem/action-create-comment@v1
      #   with:
      #     github_token: ${{ secrets.GITHUB_TOKEN }}
      #     body: |
      #       Hello, @${{ github.actor }}!

